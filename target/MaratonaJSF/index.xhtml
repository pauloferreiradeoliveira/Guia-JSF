<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
      xmlns:p="http://primefaces.org/ui">
<h:head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
    <title>JSF - Inicio</title>
</h:head>
<h:body>
    <h:outputText value="#{testeAplicationBean.categoriasList}"/>
    <c:set var="numerosList" value="#{[10,1,2,4,5,7,8,6]}"/>
    <p:importEnum type="br.com.paulo.model.enums.Turno" var="Turno" allSuffix="ALL_ENUM_VALUES"/>

    <h:outputLabel value="Ola Mundo"/>
    <br/>
    <h:outputLabel value="#{registarEstudanteBean.estudante.nome}"/>
    <br/>
    <h:outputLabel value="#{registarEstudanteBean.estudante.nota1 eq registarEstudanteBean.estudante.nota3}"/>
    <br/>
    <!--
        lt - menor que
        le - menor ou igual que
        and - $$
        eq - ==
        or - ||
        not - !
        ne - !=
        gt - maior que
        ge - maior ou igual que
     -->
    <h:outputText value="Comparação"/>
    <h:outputLabel value="#{registarEstudanteBean.estudante.nota1 le registarEstudanteBean.estudante.nota2}"/> <br/>
    <h:outputLabel value="#{registarEstudanteBean.estudante.nota1 eq  0 ? 'zero' : 'maior que zero'}"/>
    <h:outputLabel value="#{registarEstudanteBean.estudante.nota1 = 20}"/><br/>
    <h:outputLabel value="#{registarEstudanteBean.estudante.turno eq Turno.MATUTINO}"/>

    <h1>Arrays</h1>
    <ui:repeat value="#{registarEstudanteBean.nomes}" var="nome">
        <h:outputLabel value="#{nome}"/>
    </ui:repeat>
    <br/>
    <!-- toArrays - MAP,SET-->
    <ui:repeat value="#{registarEstudanteBean.nomesSet.toArray()}" var="nome">
        <h:outputLabel value="#{nome}"/>
    </ui:repeat>
    #{registarEstudanteBean.excultar("test")}
    <h:form>
        <h:commandButton value="Ir Executar" action="#{registarEstudanteBean.irPrincipal()}"/>
    </h:form>
    <br/>
    <h2>Ajax - Mostrar</h2>
    <h:form id="form">
        <h:commandButton value="Exibir Nota">
            <f:ajax render="notasGrid" listener="#{registarEstudanteBean.exibirNotas}"/>
        </h:commandButton>
        <h:commandButton value="Exibir Nota">
            <f:ajax render="notasGrid" listener="#{registarEstudanteBean.exibirNotas}"/>
        </h:commandButton>

        <h:panelGrid id="notasGrid">
            <h:outputText value="#{registarEstudanteBean.estudante.nome}"/><br/>
            <h:outputText value="#{registarEstudanteBean.estudante.sobrenome}"/><br/>
            <h:outputText value="#{registarEstudanteBean.estudante.nota1}"
                          rendered="#{registarEstudanteBean.mostarNotas}"/><br/>
            <h:outputText value="#{registarEstudanteBean.estudante.nota2}"
                          rendered="#{registarEstudanteBean.mostarNotas}"/><br/>
            <h:outputText value="#{registarEstudanteBean.estudante.nota3}"
                          rendered="#{registarEstudanteBean.mostarNotas}"/><br/>
        </h:panelGrid>
    </h:form>

    #{(soma -> soma + num)(10)}<br/>
    #{((v1,v2,v3) -> v1*v2*v3)(5,1,10)}

    #{cubo = (x->x*x*x);cubo(56)}<br/>
    <h:form>
        <h:commandButton value="Calcular Cubo" actionListener="#{registarEstudanteBean.calcularCubo((x->x*x*x),10)}"/>
    </h:form>
    <!-- list -->
    <ui:repeat value="#{['UU','II','HH']}" var="foda">
        #{foda}
    </ui:repeat>
    <br/>
    <!-- Set -->
    <ui:repeat value="#{{'UU','II','HH','II'}}" var="foda">
        #{foda}
    </ui:repeat>
    <!-- map -->
    <ui:repeat value="#{{'melhor':'UU','lugar':'II'}}" var="foda">
        <ui:repeat value="#{foda.entrySet().toArray()}" var="map">
            #{map.key} - #{map.value}
        </ui:repeat>
    </ui:repeat>

    <ui:repeat value="#{[1,2,3,4,5,6,7,8,9].stream().filter(v -> v>5).toList()}" var="valor">
        #{valor}
    </ui:repeat>

    <br/>
    #{numerosList.stream().average().get()}
    <br/>
    #{numerosList.stream().sum()}
    <br/>
    #{numerosList.stream().filter(v -> v>5).sum()}
</h:body>
</html>

